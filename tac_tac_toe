import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    
    
    public static void valueF(String[] grid, char xOrzero) {
        int[][] moves = new int[3][3];
        for(int i=0; i<3;i++) {
            for(int j=0;j<3;j++) {
                moves[i][j] = -1;
            }
        }
        int count=0;
        for(int i=0; i<3; i++) {
            for(int j=0;j<3; j++) {
                switch(grid[i].charAt(j)) {
                    case '_':
                        moves[i][j]=0;
                        break;
                    case 'X':
                        if(xOrzero== 'X') {
                            moves[i][j]=2;
                        }
                        else {
                            moves[i][j]=1;
                        }
                        break;
                    case 'O':
                        if(xOrzero== 'O') {
                            moves[i][j]=2;
                        }
                        else {
                            moves[i][j]=1;
                        }
                        break;
                    default:
                        System.out.println("66 66");
                }
            }
        }
        int largest = -99;
        int largesti = -1;
        int largestj = -1;
        int[][] moves2=new int[3][3];
        for(int i=0; i<3;i++) {
            for(int j=0;j<3;j++) {
                moves2[i][j] = -100;
            }
        }
        // int x0 = moves[0][0] + moves [0][1] +moves[0][2];
        for(int i=0; i<3; i++) {
            for(int j=0;j<3; j++) {
                if(moves[i][j]==0) {
                    if(i==0 && j==0) {
                        moves2[i][j] = ((moves[0][1]==moves[0][2])? moves[0][1] : 0)+((moves[1][0]==moves[2][0])? moves[1][0] : 0)+((moves[1][1]==moves[2][2])? moves[1][1] : 0);
                    }
                    else if(i==0 && j==1) {
                        moves2[i][j] = ((moves[0][0]==moves[0][2])? moves[0][0] : 0)+((moves[1][1]==moves[2][1])? moves[1][1] : 0);
                    }
                    else if(i==0 && j==2) {
                        moves2[i][j] = ((moves[0][1]==moves[0][0])? moves[0][0] : 0)+((moves[1][2]==moves[2][2])? moves[2][2] : 0)+((moves[2][0]==moves[1][1])? moves[1][1] : 0);
                    }
                    else if(i==1 && j==0) {
                        moves2[i][j] = ((moves[0][0]==moves[2][0])? moves[0][0] : 0)+((moves[1][1]==moves[1][2])? moves[1][1] : 0);
                    }
                    else if(i==1 && j==1) {
                        moves2[i][j] = ((moves[0][0]== moves[2][2])? moves[0][0] : 0)+((moves[0][2]==moves[2][0])? moves[0][2] : 0)+((moves[1][0]==moves[1][2])? moves[1][0] : 0)+((moves[2][1]==moves[0][1])? moves[0][1] : 0)+1;
                    }
                    else if(i==1 && j==2) {
                        moves2[i][j] = ((moves[0][2]==moves[2][2])? moves[0][2] : 0)+((moves[1][1]==moves[1][0])? moves[1][1] : 0);
                    }
                    else if(i==2 && j==0) {
                        moves2[i][j] = ((moves[0][0]==moves[1][0])? moves[0][0] : 0)+((moves[0][2]==moves[1][1])? moves[1][1] : 0)+((moves[2][1]==moves[2][2])? moves[2][2] : 0);
                    }
                    else if(i==2 && j==1) {
                        moves2[i][j] = ((moves[0][1]==moves[1][1])? moves[1][1] : 0)+((moves[2][0]==moves[2][2])? moves[2][2] : 0);
                    }
                    else if(i==2 && j==2) {
                        moves2[i][j] = ((moves[2][0]==moves[2][1])? moves[2][1] : 0)+((moves[0][2]==moves[1][2])? moves[1][2] : 0)+((moves[1][1]==moves[0][0])? moves[1][1] : 0);
                    }
                    // if (moves[i][j]>largest) {
                    //     largesti=i;
                    //     largestj=j;
                    //     largest=moves[i][j];
                    // }
                }
            }
        }
        for(int i=0; i<3; i++) {
            for(int j=0;j<3; j++) {
                if (moves2[i][j]>largest) {
                    largesti=i;
                    largestj=j;
                    largest=moves2[i][j];
                }
            }
        }
        System.out.println(largesti+" "+largestj);
        
    }
 
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        
        String[] ns = scanner.nextLine().split(" ");
        String[]grid = new String[3];

        char n = ns[0].charAt(0);
        
        for(int i=0; i<3; i++) {
            ns = scanner.nextLine().split(" ");
            grid[i]=ns[0];
        }
        
        valueF(grid, n);
        scanner.close();
    }
}
